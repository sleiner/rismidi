name: Build

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  BUILD_PROFILE: release

jobs:
  plugins:
    name: Plugins for ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "macOS 15"
            os: "macos-15"
            targets: "x86_64-apple-darwin,aarch64-apple-darwin"
          - name: "Ubuntu 22.04"
            os: "ubuntu-22.04"
            targets: "x86_64-unknown-linux-gnu"
          - name: "Windows"
            os: "windows-2022"
            targets: "x86_64-pc-windows-msvc"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.targets }}
      - name: Cargo cache
        if: github.event_name == 'pull_request'
        uses: swatinem/rust-cache@v2
        with:
          key: "${{ runner.os }}"
          cache-on-failure: true
          workspaces: |
            .
            validate_vst3
      - name: Compile shared code
        shell: bash
        run: |
          # Build all packages using cargo for these targets: ${{ matrix.targets }}

          additional_args=()

          IFS=',' read -ra targets <<< "${{ matrix.targets }}"
          for target in "${targets[@]}"; do
              additional_args+=("--target" "${target}")
          done

          cargo build --workspace --profile ${BUILD_PROFILE} "${additional_args[@]}"
      - name: Build plugin bundles
        shell: bash
        run: |
          # Build all plugins using cargo xtask

          function bundle_command() {
            if [[ $(echo "${{ matrix.targets }}" | grep ",") ]]; then
              echo "bundle-universal"
            else
              echo "bundle"
            fi
          }

          packages=$(cargo xtask known-packages)
          echo ""

          for package in ${packages}; do
            echo "::group::${package}"
            cargo xtask "$(bundle_command)" "${package}" --profile "${BUILD_PROFILE}"
            echo "::endgroup::"
          done
      - name: Build VST3 validator
        shell: bash
        run: |
          # Install dependencies of validator and build it

          if [[ $(uname) == "Linux" ]] && [[ $(lsb_release -d | grep Ubuntu) ]]; then
            sudo apt-get update
            sudo apt-get install -yq \
                libgtkmm-3.0-dev \
                libx11-dev libx11-xcb-dev \
                libxcb-util-dev libxcb-cursor-dev libxcb-keysyms1-dev libxcb-xkb-dev \
                libxkbcommon-dev libxkbcommon-x11-dev \
                libfontconfig1-dev \
                libcairo2-dev \
                libfreetype6-dev \
                libpango1.0-dev
          fi

          cargo test --no-run
        working-directory: validate_vst3
      - name: Validate VST3 plugins
        run: cargo test
        working-directory: validate_vst3
      - name: Collect all plugins for packaging
        shell: bash
        run: |
          # Collect all plugins for packaging
          PACKAGE_NAME="rismidi-${{ runner.os }}"
          echo "Archive name is \"${PACKAGE_NAME}\""

          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> "$GITHUB_ENV"
          mkdir -p "artifacts/$PACKAGE_NAME"
          mv target/bundled/* "artifacts/$PACKAGE_NAME"
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: artifacts

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Build documentation
        run: cargo doc --workspace --no-deps --profile ${BUILD_PROFILE}
